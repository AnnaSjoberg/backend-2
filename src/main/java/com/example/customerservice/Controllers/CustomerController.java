package com.example.customerservice.Controllers;

import com.example.customerservice.Models.Address;
import com.example.customerservice.Models.Customer;
import com.example.customerservice.Repos.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/customers") // This means URL's start with /demo (after Application path)
public class CustomerController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CustomerRepository customerRepo;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewCustomer (@RequestParam String name,
                                                @RequestParam String email,
                                                @RequestParam String ssn,
                                                @RequestParam String street,
                                                @RequestParam String zipcode,
                                                @RequestParam String postalAddress,
                                                @RequestParam String country) {

        customerRepo.save(new Customer(name,ssn,new Address(street,zipcode,postalAddress,country),email));
        return "Customer saved";
    }

    @GetMapping(path="/getAll")
    public @ResponseBody Iterable<Customer> getAllCustomers() {
        // This returns a JSON or XML with the users
        return customerRepo.findAll();
    }
    @GetMapping(path = "/getById/{id}")
    public @ResponseBody Customer getById(@PathVariable Long id) {
        return customerRepo.findById(id).get();
    }
    @GetMapping(path = "/getBySsn/{ssn}")
    public @ResponseBody Customer getBySsn(@PathVariable String ssn) {
        return customerRepo.findBySsn(ssn);
    }

    @GetMapping(path = "/deleteById/{id}")
    public @ResponseBody String deleteById(@PathVariable Long id) {
        customerRepo.deleteById(id);
        return "Customer deleted";
    }


}